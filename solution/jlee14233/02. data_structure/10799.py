##쇠막대기
'''
여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.

쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.
아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.

이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.

레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.
위 예의 괄호 표현은 그림 위에 주어져 있다.

쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.

쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.
(1)-1 (1(2(3(3)(3))(3(3))(2)-1)-1)-1(1(2)-1)-1 17

((()()()()()))()()
3+2+3
4
6
6
12
16
8
밑의 풀이 방식에는 답이 없음.


덱으로 풀이를 해본다.
( <= 맨 처음
다음 문자가 ), (에 따라서 숫자를 부여한다
) => 0으로 처리하고 데이터를 버린다.
(( 경우 1점을 부여한다
(1(2(3()-1(3)-1)-1(+2(+3)-1(+2)-1)-1)()


(())
2개
((()))
((()))4개이다
( append
) pop
(의 개수만 conut
( append + cnt=1
(( cnt=2
((( cnt=3
((() pop cnt 3
((()) pop cnt 1
((())) pop cnt 0

    
why?

()= '' replace
##괄호문제

n = int(sys.stdin.readline())

for _ in range(n):
    words = sys.stdin.readline()

    while '()' in words:
        words = words.replace('()', '',1)
        cnt+=1

3 2 2
()((()))
()=0
(())=2
(()()) = 3
(()()())=4....

((+1 ()+1 ))=4
((()3())6)9=9

(=1
)=-1
()=0
((> 2
((( 3
((((3)(3)2)1)0)


((((3)((4)(4)3)2)((3)2)(2)1)0)((1)(1)0)
16+8+2
26


레이저와 쇠막대의 끝만 생각한다?
))->

( = cnt+1
) pop and size(cnt)

stack=[]

하나씩 읽는다.
stack안에 아무것도 없을 경우 = 하나를 append한다.
stack의 [-1]과 지금 읽는 문자의 차이를 비교한다
(일 경우 레이저가 아니고 쇠막대기의 끝이다. append한다
)의 경우 레이저이다. stack을 pop하고 스택의 size를 cnt값에 더한다.
words의 끝까지 읽는다.

'''
import sys
sys.stdin = open('solution/jlee14233/02. data_structure/입력.txt', 'r')

cnt=0
stack=[]
words = list(sys.stdin.readline())

for i in range(len(words)):    
    if words[i]=='(':
        stack.append('(')
    else:
        if words[i-1]=='(':
            stack.pop()
            cnt+=len(stack)
        else:
            stack.pop()
            cnt+=1
print(cnt)

a = list(input())
result = 0
stack = []

for i in range(len(a)):
    if a[i] == '(':
        stack.append('(')

    else:
        if a[i-1] == '(': 
            stack.pop()
            result += len(stack)

        else:
            stack.pop() 
            result += 1 

print(result)


'''
잘못 생각했던 점. 2개를 비교한다고 하고선 while문으로 stack만을 비교하게 했음
stack안에는 '(' 문자만 쌓이는데, ')' 이쪽으로 갈 이유가 하나도 없었음.
어제의 풀이 과정은 올바르게 가고 있었는데, 스택을 어떻게 써야하는지에 대한 개념이 약간 부족했던 것으로 보임.
또한 이전의 words와 비교하는 방식에서 계속 오류가 발생 했고, while문이 아닌 for + len(words) 를 통해서 하나씩 비교하는
방법을 찾지 못한 점이 계속 코딩에 실패하는 이유가 되었던 것 같음.
 
 서버문제인가 위로 돌리면 런타임 에러 뜬다. 쉬발 왜야 개같은 거
 밑이랑 개똑같은데 왜 오류나냐고 이 스레기 같은 쉬발 검사기야


'''